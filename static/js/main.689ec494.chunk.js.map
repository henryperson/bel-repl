{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["api","colors","base03","base02","base01","base00","base0","base1","base2","base3","yellow","orange","red","magenta","violet","blue","cyan","green","solarized","light","fg","bg","hl","emph","comment","dark","style","bar","height","width","display","alignItems","padding","barTitle","textTransform","panel","flex","flexDirection","body","flexGrow","fontFamily","fontSize","Space","dims","App","React","useState","belCode","setBelCode","output","replInput","requestOutstanding","replState","setCombinedState","replInputField","useRef","useEffect","current","focus","windowSize","getSize","window","innerWidth","innerHeight","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","color","background","justifyContent","cursor","onClick","fetch","method","JSON","stringify","expr","state","then","resp","json","result","type","text","icon","faPlay","value","onChange","event","target","resize","margin","border","outline","backgroundColor","spellCheck","map","index","key","marginTop","x","Error","assertNever","rows","ref","currentState","onKeyDown","keyCode","preventDefault","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.689ec494.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\n\nconst api = 'https://repl-api.bel-chime.com'\n\n// Solarized theme from: https://ethanschoonover.com/solarized/\n// Colors taken from: https://github.com/thomasf/solarized-css/blob/master/src/solarized-css/partials/solarized-colors.styl\nconst colors = {\n  base03: \"#002b36\",\n  base02: \"#073642\",\n  base01: \"#586e75\",\n  base00: \"#657b83\",\n  base0: \"#839496\",\n  base1: \"#93a1a1\",\n  base2: \"#eee8d5\",\n  base3: \"#fdf6e3\",\n\n  yellow: \"#b58900\",\n  orange: \"#cb4b16\",\n  red: \"#dc322f\",\n  magenta: \"#d33682\",\n  violet: \"#6c71c4\",\n  blue: \"#268bd2\",\n  cyan: \"#2aa198\",\n  green: \"#859900\",\n}\n\nconst solarized = {\n  light: {\n    fg: colors.base00,\n    bg: colors.base3,\n    hl: colors.base2,\n    emph: colors.base01,\n    comment: colors.base1,\n  },\n\n  dark: {\n    fg: colors.base0,\n    bg: colors.base03,\n    hl: colors.base02,\n    emph: colors.base1,\n    comment: colors.base01,\n  },\n\n  ...colors,\n}\n\nconst style = {\n  bar: {\n    height: \"50px\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"15px\",\n  },\n  barTitle: {\n    textTransform: \"uppercase\",\n  },\n  panel: {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n  },\n  body: {\n    flexGrow: 1,\n    fontFamily: 'Monaco, Menlo, \"Courier New\", monospace',\n    fontSize: \"14px\",\n    display: \"flex\",\n  },\n} as {[name: string]: React.CSSProperties}\n\nfunction Space(dims: {width?: string, height?: string}) {\n  return <div style={dims} />\n}\n\nfunction assertNever(x: never): never {\n  throw new Error(\"Unexpected object: \" + x);\n}\n\n// Adapted from https://usehooks.com/useWindowSize/\nfunction useWindowSize() {\n  function getSize() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    }\n  }\n\n  const [windowSize, setWindowSize] = React.useState(getSize)\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowSize(getSize())\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, []) // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize\n}\n\nfunction App() {\n  const [belCode, setBelCode] = React.useState(\"(cons 'hello 'world)\")\n  const [{output, replInput, requestOutstanding, replState}, setCombinedState] = React.useState({\n    output: [] as {type: \"input\" | \"output\", text: string}[],\n    replInput: \"\",\n    requestOutstanding: false,\n    replState: \"\",\n  })\n  const replInputField = React.useRef(null) as React.RefObject<HTMLTextAreaElement>\n  React.useEffect(() => {\n    if (!requestOutstanding) {\n      replInputField.current?.focus()\n    }\n  }, [replInputField, requestOutstanding])\n  const windowSize = useWindowSize()\n\n  return (\n    // Main container\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100%\",\n        width: \"100%\",\n        flexDirection: windowSize.width > windowSize.height ? \"row\" : \"column\",\n      }}\n    >\n      {/* Left panel */}\n      <div style={{color: solarized.light.fg, ...style.panel}}>\n        {/* Left top bar */}\n        <div style={{background: solarized.light.hl, justifyContent: \"space-between\", ...style.bar}}>\n          <span style={style.barTitle}>editor</span>\n          {/* Submit button */}\n          <div\n            style={{\n              textTransform: \"uppercase\",\n              display: \"flex\",\n              alignItems: \"center\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              setCombinedState(({output}) => ({\n                replInput: \"\",\n                requestOutstanding: true,\n                output,\n                replState,\n              }))\n              fetch(`${api}/stateful-long`, {\n                method: 'POST',\n                body: JSON.stringify({\n                  expr: belCode,\n                  state: \"\",\n                }),\n              }).then(resp => resp.json()).then(({result, state}) => setCombinedState({\n                output: [{type: \"output\", text: result}],\n                replInput: \"\",\n                requestOutstanding: false,\n                replState: state,\n              }))\n            }}\n          >\n            run <Space width=\"7px\"/><FontAwesomeIcon style={{fontSize: \"small\"}} icon={faPlay} />\n          </div>\n        </div>\n\n        {/* Left body */}\n        <div style={{background: solarized.light.bg, ...style.body}}>\n          {/* Text editor */}\n          <textarea\n            value={belCode}\n            onChange={(event) => setBelCode(event.target.value)}\n            style={{\n              resize: \"none\",\n              width: \"100%\",\n              margin: 0,\n              flexGrow: 1,\n              border: \"none\",\n              outline: \"none\",\n              fontSize: \"inherit\",\n              padding: \"15px\",\n              color: \"inherit\",\n              backgroundColor: \"inherit\",\n            }}\n            spellCheck=\"false\"\n          >\n          </textarea>\n        </div>\n      </div>\n\n      {/* Right panel */}\n      <div style={{color: solarized.dark.fg, ...style.panel}}>\n        {/* Right top bar */}\n        <div style={{background: solarized.dark.hl, ...style.bar}}>\n        <span style={{textTransform: \"uppercase\"}}>repl</span>\n        </div>\n\n        {/* Right body */}\n        <div style={{background: solarized.dark.bg, ...style.body}}>\n          {/* Output window */}\n          <div style={{padding: \"15px\", width: \"100%\"}}>\n            {output.map(({type, text}, index) => {\n              switch (type) {\n                case \"input\":\n                  return <div key={index}>> {text}</div>\n                case \"output\":\n                  return <pre style={{marginTop: 0}} key={index}>{text}</pre>\n                default:\n                  return assertNever(type)\n              }\n            })}\n            {/* Repl */}\n            <div style={{display: \"flex\", alignItems: \"center\"}}>\n              {requestOutstanding ? null : <>\n                >&nbsp; <textarea\n                    rows={1}\n                    value={replInput}\n                    ref={replInputField}\n                    onChange={(event) => {\n                      // https://stackoverflow.com/a/44708693\n                      const value = event.target.value\n                      setCombinedState((currentState) => ({\n                        ...currentState,\n                        replInput: value,\n                      })\n                    )}}\n                    onKeyDown={(event) => {\n                      if (event.keyCode === 13) {\n                        event.preventDefault()\n                        setCombinedState(({output}) => ({\n                          output: [...output,  {type: \"input\", text: replInput}],\n                          replInput: \"\",\n                          requestOutstanding: true,\n                          replState: \"\",\n                        }))\n                        fetch(`${api}/stateful`, {\n                          method: 'POST',\n                          body: JSON.stringify({\n                            expr: replInput,\n                            state: replState,\n                          })\n                        })\n                        .then((resp) => resp.json())\n                        .then(({result, state}) => setCombinedState(({output}) => ({\n                          output: [...output, {type: \"output\", text: result}],\n                          requestOutstanding: false,\n                          replInput: \"\",\n                          replState: state,\n                        })))\n                      }\n                    }}\n                    style={{\n                      flex: \"1\",\n                      background: solarized.dark.bg,\n                      border: \"none\",\n                      outline: \"none\",\n                      resize: \"none\",\n                      fontSize: \"inherit\",\n                      padding: \"0\",\n                      color: \"inherit\",\n                      margin: 0,\n                    }}\n                    spellCheck=\"false\"\n                ></textarea>\n              </>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}