{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","belCode","setBelCode","output","replInput","requestOutstanding","setCombinedState","replInputField","useRef","useEffect","current","focus","panelStyle","display","width","flexDirection","barStyle","height","bodyStyle","flexGrow","style","background","justifyContent","type","onClick","fetch","method","body","JSON","stringify","expr","state","then","resp","json","result","text","value","onChange","event","target","resize","border","outline","fontSize","padding","map","index","key","rows","ref","currentState","onKeyDown","keyCode","preventDefault","flex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.823d1407.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  const [belCode, setBelCode] = React.useState('(prn \"Hello World!\")')\n  const [{output, replInput, requestOutstanding}, setCombinedState] = React.useState({\n    output: [],\n    replInput: \"\",\n    requestOutstanding: false,\n  })\n  const replInputField = React.useRef(null)\n  React.useEffect(() => {\n    if (!requestOutstanding) {\n      replInputField.current.focus()\n    }\n  }, [requestOutstanding])\n\n  const panelStyle = {\n    display: \"flex\",\n    width: \"50%\",\n    flexDirection: \"column\",\n  }\n  const barStyle = {\n    height: \"50px\",\n    width: \"100%\",\n    display: \"flex\",\n  }\n  const bodyStyle = {\n    flexGrow: \"1\",\n  }\n  return (\n    // Main container\n    <div style={{display: \"flex\", height: \"100vh\", width: \"100vw\"}}>\n      {/* Left panel */}\n      <div style={panelStyle}>\n        {/* Left top bar */}\n        <div style={{background: \"plum\", justifyContent: \"space-between\", ...barStyle}}>\n          placeholder left\n          <button\n            style={{type: \"button\"}}\n            onClick={() => {\n              setCombinedState(({output}) => ({\n                replInput: \"\",\n                requestOutstanding: true,\n                output,\n              }))\n              fetch(\"https://playground-jqd2vloq4a-uw.a.run.app/stateful\", {\n                method: 'POST',\n                body: JSON.stringify({\n                  expr: belCode,\n                  state: \"\",\n                }),\n              }).then(resp => resp.json()).then(({result}) => setCombinedState({\n                output: [{type: \"output\", text: result}],\n                replInput: \"\",\n                requestOutstanding: false,\n              }))\n            }}\n          >\n            submit\n          </button>\n        </div>\n\n        {/* Left body */}\n        <div style={{background: \"gray\", ...bodyStyle}}>\n          <textarea\n            value={belCode}\n            onChange={(event) => setBelCode(event.target.value)}\n            style={{\n              resize: \"none\",\n              width: \"100%\",\n              flexGrow: \"1\",\n              background: \"gray\",\n              border: \"none\",\n              outline: \"none\",\n              fontSize: \"inherit\",\n              padding: \"30px\",\n            }}\n          >\n            input text here\n          </textarea>\n        </div>\n      </div>\n\n      {/* Right panel */}\n      <div style={panelStyle}>\n        {/* Right top bar */}\n        <div style={{background: \"cyan\", ...barStyle}}>\n          placeholder right\n        </div>\n\n        {/* Right body */}\n        <div style={{background: \"tomato\", ...bodyStyle}}>\n          {/* Output window */}\n          <div style={{padding: \"30px\"}}>\n            {output.map(({type, text}, index) => {\n              switch (type) {\n                case \"input\":\n                  return <div key={index}>> {text}</div>\n                case \"output\":\n                  return <div key={index}>{text}</div>\n              }\n            })}\n            <div style={{display: \"flex\"}}>\n              {requestOutstanding ? null : <>\n                >&nbsp; <textarea\n                    rows=\"1\"\n                    value={replInput}\n                    ref={replInputField}\n                    onChange={(event) => {\n                      // https://stackoverflow.com/a/44708693\n                      const value = event.target.value\n                      setCombinedState((currentState) => ({\n                        ...currentState,\n                        replInput: value,\n                      })\n                    )}}\n                    onKeyDown={(event) => {\n                      if (event.keyCode == 13) {\n                        event.preventDefault()\n                        setCombinedState(({output}) => ({\n                          output: [...output,  {type: \"input\", text: replInput}],\n                          replInput: \"\",\n                          requestOutstanding: true,\n                        }))\n                        fetch(\"https://playground-jqd2vloq4a-uw.a.run.app/stateful\", {\n                          method: 'POST',\n                          body: JSON.stringify({\n                            expr: replInput,\n                            state: \"\",\n                          })\n                        })\n                        .then((resp) => resp.json())\n                        .then(({result}) => setCombinedState(({output}) => ({\n                          output: [...output, {type: \"output\", text: result}],\n                          requestOutstanding: false,\n                          replInput: \"\",\n                        })))\n                      }\n                    }}\n                    style={{\n                      flex: \"1\",\n                      background: \"tomato\",\n                      border: \"none\",\n                      outline: \"none\",\n                      resize: \"none\",\n                      fontSize: \"inherit\",\n                      padding: \"0\",\n                    }}\n                ></textarea>\n              </>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}