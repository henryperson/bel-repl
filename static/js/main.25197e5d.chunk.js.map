{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useState","belCode","setBelCode","output","setOutput","panelStyle","display","width","flexDirection","barStyle","height","bodyStyle","flexGrow","style","background","justifyContent","type","onClick","fetch","method","body","then","resp","text","value","onChange","event","target","resize","border","outline","fontSize","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,4HC+E5BC,MA3Ef,WAAgB,IAAD,EACiBC,IAAMC,SAAS,wBADhC,mBACNC,EADM,KACGC,EADH,OAEeH,IAAMC,SAAS,IAF9B,mBAENG,EAFM,KAEEC,EAFF,KAIPC,EAAa,CACjBC,QAAS,OACTC,MAAO,MACPC,cAAe,UAEXC,EAAW,CACfC,OAAQ,OACRH,MAAO,OACPD,QAAS,QAELK,EAAY,CAChBC,SAAU,KAEZ,OAEE,yBAAKC,MAAO,CAACP,QAAS,OAAQI,OAAQ,QAASH,MAAO,UAEpD,yBAAKM,MAAOR,GAEV,yBAAKQ,MAAK,aAAGC,WAAY,OAAQC,eAAgB,iBAAoBN,IAArE,mBAEE,4BAAQI,MAAO,CAACG,KAAM,UAAWC,QAAS,kBACxCC,MAAM,6CAA8C,CAClDC,OAAQ,OACRC,KAAMnB,IACPoB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAAQF,KAAKjB,KAJlC,WAWF,yBAAKS,MAAK,aAAGC,WAAY,QAAWH,IAClC,8BACEa,MAAOvB,EACPwB,SAAU,SAAAC,GAAK,OAAIxB,EAAWwB,EAAMC,OAAOH,QAC3CX,MAAO,CACLe,OAAQ,OACRrB,MAAO,OACPK,SAAU,IACVE,WAAY,OACZe,OAAQ,OACRC,QAAS,OACTC,SAAU,UACVC,QAAS,SAXb,qBAoBJ,yBAAKnB,MAAOR,GAEV,yBAAKQ,MAAK,aAAGC,WAAY,QAAWL,IAApC,qBAKA,yBAAKI,MAAK,aAAGC,WAAY,UAAaH,IAEpC,yBAAKE,MAAO,CAACmB,QAAS,SACnB7B,OC3DO8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25197e5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [belCode, setBelCode] = React.useState('(prn \"Hello World!\")')\n  const [output, setOutput] = React.useState(\"\")\n\n  const panelStyle = {\n    display: \"flex\",\n    width: \"50%\",\n    flexDirection: \"column\",\n  }\n  const barStyle = {\n    height: \"50px\",\n    width: \"100%\",\n    display: \"flex\",\n  }\n  const bodyStyle = {\n    flexGrow: \"1\",\n  }\n  return (\n    // Main container\n    <div style={{display: \"flex\", height: \"100vh\", width: \"100vw\"}}>\n      {/* Left panel */}\n      <div style={panelStyle}>\n        {/* Left top bar */}\n        <div style={{background: \"plum\", justifyContent: \"space-between\", ...barStyle}}>\n          placeholder left\n          <button style={{type: \"button\"}} onClick={() =>\n            fetch(\"https://playground-jqd2vloq4a-uw.a.run.app\", {\n              method: 'POST',\n              body: belCode,\n          }).then(resp => resp.text()).then(setOutput)\n          }>\n            submit\n          </button>\n        </div>\n\n        {/* Left body */}\n        <div style={{background: \"gray\", ...bodyStyle}}>\n          <textarea\n            value={belCode}\n            onChange={event => setBelCode(event.target.value)}\n            style={{\n              resize: \"none\",\n              width: \"100%\",\n              flexGrow: \"1\",\n              background: \"gray\",\n              border: \"none\",\n              outline: \"none\",\n              fontSize: \"inherit\",\n              padding: \"30px\",\n            }}\n          >\n            input text here\n          </textarea>\n        </div>\n      </div>\n\n      {/* Right panel */}\n      <div style={panelStyle}>\n        {/* Right top bar */}\n        <div style={{background: \"cyan\", ...barStyle}}>\n          placeholder right\n        </div>\n\n        {/* Right body */}\n        <div style={{background: \"tomato\", ...bodyStyle}}>\n          {/* Output window */}\n          <div style={{padding: \"30px\"}}>\n            {output}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}